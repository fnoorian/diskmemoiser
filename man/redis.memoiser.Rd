% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/redis_memo.R
\name{redis.memoiser}
\alias{redis.memoiser}
\title{Memoiser with Redis Backends}
\usage{
redis.memoiser(fun, use.func.contents = FALSE,
  compare.args.as.characters = FALSE, redis.host = redisGetContext()$host,
  redis.port = redisGetContext()$port)
}
\arguments{
\item{fun}{The funciton to memoise}

\item{use.func.contents}{Boolean, to use the function contents (using deparse) or simply use its character name to store the results in DB}

\item{compare.args.as.characters}{Boolean, to compare the function input arguements in binary or as character}

\item{redis.host}{Redis host IP}

\item{redis.port}{Redis host port number}
}
\value{
A memoised function. When called, connect to redis to see if results are available. If not, will run the function to get results.
}
\description{
Memoises a function using redis
}
\examples{
\dontrun{
delay.func <- function(x) {
  cat("computing ", x, "\\n")

  Sys.sleep(1)

  return (list(x, x^2))
}

redis.memoiser.flush()

library("parallel")
options(mc.cores = 8)

a = c(1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,
      2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4)

print("starting sims")

delay.func.redis.m = redis.threadsafe.memoiser(delay.func)

total_time = system.time({
  x = mclapply(a, delay.func.redis.m)
})

print(x)
print(total_time)
}

}

