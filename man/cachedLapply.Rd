% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cachedLapply.R
\name{cachedLapply}
\alias{cachedLapply}
\title{Memo-cached lApply}
\usage{
cachedLapply(x, fun, memo.cache, plapply = lapply, ...,
  use.func.contents = FALSE, compare.args.as.characters = FALSE,
  auto.save = FALSE)
}
\arguments{
\item{x}{A vector to apply to the function}

\item{fun}{An arbitrary function}

\item{memo.cache}{A disk cache created by \code{\link{diskCache}} (or \code{\link{MemCache}})}

\item{plapply}{Apply function to use. By default \code{\link[base]{lapply}}.
To be used with parallel processing type apply functions, .e.g, \code{\link[parallel]{mclapply}}.}

\item{...}{Other inputs to \code{plapply}. These will be considered in memoization.}

\item{use.func.contents}{If TRUE, will hash \code{fun}'s contents and
use it for looking up for the memoized object.
Otherwise, function name will be used.
Useful when functions are anonymous or their contents may
change.}

\item{compare.args.as.characters}{If TRUE, converts args to a character
string before comparing them via memoized objects.
Useful when args may vary in their current form
(e.g., pointers)}

\item{auto.save}{If TRUE, will save results to disk after every evaluation.
Otherwise results are kept in memory, until they are saved using
cache object's \code{$save}.}
}
\description{
Applies the given data to function, storing the results in the memory object cache.
}

