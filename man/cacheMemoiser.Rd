% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cacheMemoiser.R
\name{cacheMemoiser}
\alias{cacheMemoiser}
\alias{cacheMemoizer}
\title{Disk based memoisation}
\usage{
cacheMemoiser(fun, memo.cache, use.func.contents = FALSE,
  compare.args.as.characters = FALSE, auto.save = FALSE)
}
\arguments{
\item{fun}{An arbitrary function}

\item{memo.cache}{A disk cache created by \code{\link{diskCache}} (or \code{\link{MemCache}})}

\item{use.func.contents}{If TRUE, will hash \code{fun}'s contents and
use it for looking up for the memoized object.
Otherwise, function name will be used.
Useful when functions are anonymous or their contents may
change.}

\item{compare.args.as.characters}{If TRUE, converts args to a character
string before comparing them via memoized objects.
Useful when args may vary in their current form
(e.g., pointers)}

\item{auto.save}{If TRUE, will save results to disk after every evaluation.
Otherwise results are kept in memory, until they are saved using
cache object's \code{$save}.}
}
\value{
A memoised function
}
\description{
Performs memoisation of arbitrary functions to disk to speed up repeated
calls to those functions.
}
\details{
This function defines a memoisation wrapper which saves the results of the
function to disk. If the function is called with the same parameters it
retrieves the previous result and returns it. Note that this only makes sense
if the function is a deterministic and not dependent on external variables.
Use carefully!
}
\references{
Based on \url{http://cran.r-project.org/web/packages/memoise}.
}

